import { Player } from "./Player";
import { interactiveGaussianRandom, gaussianRandom } from "../utils/stats/utils";
import { client } from "../../src/client.config";
import { Field, PublicKey } from "o1js";

// For testing purposes
export async function invokeTraining(player: Player, training_type : String, pubKey : PublicKey) {
    const randomPromise = await client.query.runtime.Random.randomMap.get(pubKey);
    let randomBigInt = randomPromise?.toBigInt();
    if(randomBigInt === undefined){
        // Not submitting a random value to chain is handled by a random function generated by server.
        randomBigInt = Field.random().toBigInt();
    }
    else{
        randomBigInt = Field.random().mul(randomBigInt).toBigInt();
    }
    
    let newGoalkeeping = {
      mental: player.mental_getter(),
      physical: player.physical_getter(),
      technical: player.technical_getter(),
      goalkeeping: player.goalkeeping_getter()
    }    

    if (training_type === 'Mental'){
       Object.values(newGoalkeeping.mental).forEach((e)=>{
        e = Math.min((interactiveGaussianRandom(3, 1.5, true, randomBigInt) + e), 100)
       })
    }
    else if (training_type === 'Physical'){
      Object.values(newGoalkeeping.mental).forEach((e)=>{
       e = Math.min((interactiveGaussianRandom(3, 1.5, true, randomBigInt) + e), 100)
      })
   }
      player.setCombined(newGoalkeeping);
      player.current_condition_setter
}


export class Trainer{
    name: String;
    profession: String;

    constructor(name:String, profession : 'Technical' | 'Physical' | 'Mental'){
        this.name = name;
        this.profession = profession
    }

    train_player(player: Player, pubkey: PublicKey ){ 
        invokeTraining(player,this.profession,pubkey);
    }
}